<?xml version="1.0" encoding="Windows-1252" ?>
<!-- *****************************************************************************
Copyright 2017 Ellucian Company L.P. and its affiliates.
 ********************************************************************************* -->
<PERFORMANCE>
    <PERFORMANCE_SQL>
      <SQL_CODE>
declare

        p_rowid_out  varchar2(18);
        data_origin  varchar2(40) := "Dani"
        test_pidm number;
        test_id varchar2(9)  ;
        test_idseqno  varchar2(5);
        stdn_term varchar2(6) := "201010" ;
        term1  varchar2(6) := "201010"
        term2  varchar2(6) := "201020"
        term3  varchar2(6) := "201110"
        existing_id number;
        pgm1   varchar2(12) := "BS_SR_SC3"
        pgm2   varchar2(12) := "BS_SR_SC2"
        pgm    varchar2(12);
        id_cnt     pls_integer := 0;
        major_code varchar2(4);
        temptregs  Sfrstcr%Rowtype;
        regdate  date;
        expirdate  date;
        Gobtpac_Cur     Gb_Third_Party_Access.Third_Party_Access_Ref;
        api_gobtpac_rec gb_third_party_access.third_party_access_rec;
        sessionid varchar2(30) := "1111111"
        spriden_id varchar2(9);

        cursor pidm_c is
        select spriden_pidm
        from spriden
        where spriden_id like "PRJ%"

        -- procedure to create the temp reg for registration
        procedure process_tregs ( newstatus varchar2) is

        Section  Ssbsect%Rowtype;

        Cursor Section_C Is
        Select * From Ssbsect Where Ssbsect_Term_Code = temptregs.sfrstcr_term_code
        And Ssbsect_Crn = Temptregs.Sfrstcr_Crn;

        Begin
        Open Section_C;
        Fetch Section_C Into Section;
        Close Section_C;


        insert into sfrstcr
        (
        SFRSTCR_TERM_CODE  ,
        SFRSTCR_PIDM    ,
        SFRSTCR_CRN   ,
        SFRSTCR_PTRM_CODE  ,
        SFRSTCR_RSTS_CODE  ,
        SFRSTCR_RSTS_DATE  ,
        SFRSTCR_ERROR_FLAG  ,
        SFRSTCR_MESSAGE  ,
        SFRSTCR_BILL_HR  ,
        SFRSTCR_WAIV_HR   ,
        SFRSTCR_CREDIT_HR    ,
        SFRSTCR_BILL_HR_HOLD   ,
        SFRSTCR_CREDIT_HR_HOLD  ,
        SFRSTCR_GMOD_CODE   ,
        SFRSTCR_GRDE_CODE  ,
        SFRSTCR_GRDE_CODE_MID ,
        SFRSTCR_GRDE_DATE   ,
        SFRSTCR_ADD_DATE   ,
        SFRSTCR_ACTIVITY_DATE    ,
        SFRSTCR_LEVL_CODE     ,
        SFRSTCR_CAMP_CODE    ,
        SFRSTCR_USER               ,
        SFRSTCR_DATA_ORIGIN   ,
        sfrstcr_reg_seq      )
        values
        ( temptregs.sfrstcr_term_code, temptregs.sfrstcr_pidm, temptregs.sfrstcr_crn,
        section.ssbsect_ptrm_code , "RE",temptregs.sfrstcr_rsts_date,  "", "", 3,0,3,3,3,"S",
        temptregs.sfrstcr_grde_code, null, null, temptregs.sfrstcr_add_date, sysdate, "UG", "M",
        user,data_origin, id_cnt);


        End Process_Tregs;

        procedure    create_sftregs( pidm number , term_in varchar2 ,
        crn varchar2 , regdate_in date, grade_code varchar2)
        is
        begin
        temptregs := Null ;
        Temptregs.Sfrstcr_Term_Code      :=  term_in;
        Temptregs.Sfrstcr_Pidm           :=    pidm;
        temptregs.sfrstcr_crn            :=  crn ;
        temptregs.sfrstcr_rsts_code      :=  "RE"  ;
        temptregs.sfrstcr_rsts_date      :=  regdate_in;
        temptregs.sfrstcr_add_date      :=  regdate_in;
        temptregs.sfrstcr_bill_hr        := 3;
        temptregs.sfrstcr_waiv_hr        :=  0;
        Temptregs.Sfrstcr_Credit_Hr      :=  4;
        temptregs.sfrstcr_gmod_code      := "S" ;
        temptregs.sfrstcr_add_date       :=   sysdate;
        temptregs.sfrstcr_Activity_Date  :=  Sysdate;
        temptregs.sfrstcr_Levl_Code      :=  "UG" ;
        temptregs.sfrstcr_camp_code      :=   "M"
        Temptregs.Sfrstcr_User           :=   User;
        temptregs.sfrstcr_grde_code      := grade_code;
        Process_Tregs("N");
        end create_sftregs;

        procedure create_enrollment(pidm number,  term_in varchar2 , regdate_in  date ) is
        p_rowid_out  varchar2(18);
        begin
        SB_ENROLLMENT.P_CREATE(
        p_TERM_CODE              => term_in,
        p_PIDM                   =>  pidm,
        p_ESTS_CODE              => "EL",
        p_ESTS_DATE              => regdate_in,
        p_MHRS_OVER              => 99,
        p_MIN_HRS            => 0,  -- needed for 8.0
        p_AR_IND                 => "N" ,
        p_ASSESSMENT_DATE        => null,
        p_ADD_DATE               => sysdate,
        p_RGRE_CODE              => null,
        p_TMST_CODE              => null,
        p_TMST_DATE              => null,
        p_TMST_MAINT_IND         =>"S",
        p_USER                   => USER,
        p_REFUND_DATE            => null,
        p_DATA_ORIGIN            => data_origin,
        p_ROWID_OUT              => p_rowid_out);


        end create_enrollment;


        procedure roll_grades(  term_in varchar2, crn varchar2) is

        begin
        shkrols.p_do_graderoll(term_in ,crn ,USER,
        "1","1","O","","","","");

        end roll_grades;

        begin

        for p in 1..2 loop
        if p = 1 then
        pgm := pgm1;
        else
        pgm := pgm2;
        end if;
        dbms_output.put_line("Start of pgm " || pgm );

        for i in 1..5000 loop
        id_cnt := id_cnt + 1;
        test_idseqno :=   lpad(to_char(id_cnt), 5, "0");
        test_id := "PRJ" || test_idseqno;
        dbms_output.put_line(i || " New ID: " || test_id);

        p_rowid_out := null;
        test_pidm := null;

        if i &lt; 1501 then
        major_code := "HIST"
        elsif i &lt; 2801 then
        major_code := "ENGL"
        elsif i &lt; 4001 then
        major_code := "ART"
        else
        major_code := "MATH"
        end if;

        begin
        select spriden_pidm into existing_id
        from spriden where spriden_id = test_id;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        existing_id := null;
        END;
        if existing_id is not null then
        delete sfbstrh where sfbstrh_pidm = existing_id;
        delete sfrstrd where sfrstrd_pidm = existing_id;
        delete sorlfos where sorlfos_pidm = existing_id;
        delete sorlfos where sorlfos_pidm = existing_id;
        delete sorlcur where sorlcur_pidm = existing_id;
        delete sv_sgbstdn where sgbstdn_pidm = existing_id;
        delete sfrstcr where sfrstcr_pidm = existing_id;
        delete sfrareg where sfrareg_pidm = existing_id;
        delete sftregs where sftregs_pidm = existing_id;
        delete sfbetrm where sfbetrm_pidm = existing_id;
        delete shrtckg where shrtckg_pidm = existing_id;
        delete shrtckl where shrtckl_pidm = existing_id;
        delete shrtckn where shrtckn_pidm = existing_id;
        delete shrtgpa where shrtgpa_pidm = existing_id;
        delete sv_shrdgmr where shrdgmr_pidm = existing_id;
        delete gobtpac where gobtpac_pidm = existing_id;
        dbms_output.put_line("remove person " || test_id);
        test_pidm := existing_id;
        end if;

        if existing_id is   null then
        gb_identification.p_create(
        P_ID_INOUT       => test_id,
        P_LAST_NAME      => "Student" || test_idseqno,
        P_FIRST_NAME     => "Projection" || test_idseqno,
        P_MI             => "T",
        P_CHANGE_IND     => NULL,
        P_ENTITY_IND     => "P",
        P_USER           => user ,
        P_ORIGIN         => data_origin,
        P_NTYP_CODE      => NULL,
        P_DATA_ORIGIN    => data_origin ,
        P_PIDM_INOUT     => test_pidm,
        P_ROWID_OUT      => p_rowid_out);
        end if;

        Insert Into sv_Sgbstdn (
        SGBSTDN_PIDM               ,
        SGBSTDN_TERM_CODE_EFF         ,
        SGBSTDN_STST_CODE          ,
        Sgbstdn_Styp_Code         ,
        Sgbstdn_Activity_Date,  sgbstdn_resd_code )
        Values (
        test_pidm, stdn_term, "AS", "S", sysdate, "R" );

        Insert Into Sv_Sorlcur(
        SORLCUR_PIDM           ,
        SORLCUR_SEQNO          ,
        SORLCUR_LMOD_CODE        ,
        SORLCUR_TERM_CODE         ,
        SORLCUR_KEY_SEQNO     ,
        SORLCUR_PRIORITY_NO     ,
        SORLCUR_ROLL_IND         ,
        SORLCUR_CACT_CODE      ,
        SORLCUR_LEVL_CODE       ,
        SORLCUR_COLL_CODE      ,
        SORLCUR_DEGC_CODE        ,
        sorlcur_program ,
        SORLCUR_USER_ID            ,
        Sorlcur_Data_Origin      ,
        Sorlcur_Activity_Date
        )
        Values (
        test_pidm, 1, Sb_Curriculum_Str.F_Learner, stdn_term,
        99, 1, "Y", "ACTIVE", "UG", "AS", "BA", pgm, user, data_origin, sysdate
        );

        insert into sv_sorlfos (
        SORLFOS_PIDM             ,
        SORLFOS_LCUR_SEQNO          ,
        SORLFOS_SEQNO               ,
        SORLFOS_LFST_CODE           ,
        SORLFOS_TERM_CODE         ,
        SORLFOS_PRIORITY_NO         ,
        SORLFOS_CSTS_CODE            ,
        SORLFOS_CACT_CODE            ,
        SORLFOS_MAJR_CODE          ,
        SORLFOS_USER_ID                ,
        SORLFOS_DATA_ORIGIN           ,
        Sorlfos_Activity_Date                )
        Values (
        test_pidm, 1, 1, "MAJOR", stdn_term,1, "CHANGED", "ACTIVE", major_code, user, data_origin, Sysdate  );

        Soklcur.P_Backload_Curr(P_Lmod  => Sb_Curriculum_Str.F_Learner,
        p_term_code => stdn_term,
        P_Keyseqno  =>99 ,
        p_pidm     => test_pidm);

        -- update pin to 11111

        Expirdate := To_Date("01-JAN-2021","DD-MON-YYYY");
        Gobtpac_Cur := Gb_Third_Party_Access.F_Query_All (P_Pidm => test_Pidm);
        FETCH gobtpac_cur INTO api_gobtpac_rec;
        close gobtpac_cur;
        Gb_Third_Party_Access.P_Update (P_Pidm => test_Pidm,
        P_Pin => "111111",
        P_Pin_Validate_Ind => "Y",
        p_usage_accept_ind => "Y",
        p_rowid => api_gobtpac_rec.r_internal_record_id,
        P_Pin_Exp_Date => Expirdate
        );


        -- register for term 1  seniors
        if i &lt; 1501 then
        regdate := to_date("23-SEP-2009","DD-MON-YYYY");
        create_enrollment(test_pidm,  term1,regdate);
        create_sftregs(test_pidm, term1, "10003",regdate, "A");
        create_sftregs(test_pidm, term1, "10002",regdate, "B");
        create_sftregs(test_pidm, term1, "10004",regdate, "B");
        create_sftregs(test_pidm, term1, "10001",regdate, "B");


        end if;
        -- register for term 2 - juniors and seniors
        if  i &lt;  2801 then
        regdate := to_date("23-MAR-2010","DD-MON-YYYY");
        create_enrollment(test_pidm,  term2,regdate);
        create_sftregs(test_pidm, term2, "1003",regdate, "A");
        create_sftregs(test_pidm, term2, "1002",regdate, "B");
        create_sftregs(test_pidm, term2, "1004",regdate, "B");
        create_sftregs(test_pidm, term2, "1001",regdate, "C");


        end if;
        -- register for term 3  - sophmores, juniors and seniors
        if  i &lt; 4001 then
        regdate := to_date("23-SEP-2014","DD-MON-YYYY");
        create_enrollment(test_pidm,  term3,regdate);
        create_sftregs(test_pidm, term3, "13152",regdate, null);
        create_sftregs(test_pidm, term3, "14460",regdate, null);
        create_sftregs(test_pidm, term3, "14498",regdate, null);
        create_sftregs(test_pidm, term3, "16452",regdate, null);
        create_sftregs(test_pidm, term3, "13373",regdate, null);
        end if;


        end loop; -- for 2500 for  students within pgm
        dbms_output.put_line("end of loop # " || p);
        end loop; -- loop
        dbms_output.put_line("roll grades");
        roll_grades(  term1  , "10003" );
        roll_grades(  term1  , "10002" );
        roll_grades(  term1  , "10004" );
        roll_grades(  term1  , "10001" );

        roll_grades(  term2  , "1001" );
        roll_grades(  term2  , "1003" );
        roll_grades(  term2  , "1002" );
        roll_grades(  term2  , "1004" );

        roll_grades(  term3  , "13373" );
        roll_grades(  term3  , "16452" );
        roll_grades(  term3  , "14498" );
        roll_grades(  term3  , "14460" );
        roll_grades(  term3  , "13152" );

        -- calculate gpas
        open pidm_c;
        loop
        fetch pidm_c into existing_id;
        exit when pidm_c%notfound;
        shkcgpa.P_TERM_GPA(existing_id,
        term1 ,
        "N");
        shkcgpa.P_TERM_GPA(existing_id,
        term2 ,
        "N");
        shkcgpa.P_TERM_GPA(existing_id,
        term3 ,
        "N");
        end loop;
        close pidm_c;

        end;
      </SQL_CODE>
    </PERFORMANCE_SQL>
</PERFORMANCE>