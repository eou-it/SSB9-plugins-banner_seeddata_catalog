<?xml version="1.0" encoding="Windows-1252" ?>
<!-- *****************************************************************************
Copyright 2017 Ellucian Company L.P. and its affiliates.
 ********************************************************************************* -->
<PERFORMANCE>
    <PERFORMANCE_SQL>
      <SQL_CODE>
declare

        p_rowid_out  varchar2(18);
        data_origin  varchar2(40) := &apos;Dani&apos; ;
        test_pidm number;
        test_id varchar2(9)  ;
        test_idseqno  varchar2(5);
        stdn_term varchar2(6) := &apos;201010&apos; ;
        term1  varchar2(6) := &apos;201010&apos; ;
        term2  varchar2(6) := &apos;201020&apos; ;
        term3  varchar2(6) := &apos;201110&apos; ;
        existing_id number;
        pgm1   varchar2(12) := &apos;BS_SR_SC3&apos; ;
        pgm2   varchar2(12) := &apos;BS_SR_SC2&apos; ;
        pgm    varchar2(12);
        id_cnt     pls_integer := 0;
        major_code varchar2(4);
        temptregs  Sfrstcr%Rowtype;
        regdate  date;
        expirdate  date;
        Gobtpac_Cur     Gb_Third_Party_Access.Third_Party_Access_Ref;
        api_gobtpac_rec gb_third_party_access.third_party_access_rec;
        sessionid varchar2(30) := &apos;1111111&apos; ;
        spriden_id varchar2(9);

        cursor pidm_c is
        select spriden_pidm
        from spriden
        where spriden_id like &apos;PRJ%&apos; ;

        -- procedure to create the temp reg for registration
        procedure process_tregs ( newstatus varchar2) is

        Section  Ssbsect%Rowtype;

        Cursor Section_C Is
        Select * From Ssbsect Where Ssbsect_Term_Code = temptregs.sfrstcr_term_code
        And Ssbsect_Crn = Temptregs.Sfrstcr_Crn;

        Begin
        Open Section_C;
        Fetch Section_C Into Section;
        Close Section_C;


        insert into sfrstcr
        (
        SFRSTCR_TERM_CODE  ,
        SFRSTCR_PIDM    ,
        SFRSTCR_CRN   ,
        SFRSTCR_PTRM_CODE  ,
        SFRSTCR_RSTS_CODE  ,
        SFRSTCR_RSTS_DATE  ,
        SFRSTCR_ERROR_FLAG  ,
        SFRSTCR_MESSAGE  ,
        SFRSTCR_BILL_HR  ,
        SFRSTCR_WAIV_HR   ,
        SFRSTCR_CREDIT_HR    ,
        SFRSTCR_BILL_HR_HOLD   ,
        SFRSTCR_CREDIT_HR_HOLD  ,
        SFRSTCR_GMOD_CODE   ,
        SFRSTCR_GRDE_CODE  ,
        SFRSTCR_GRDE_CODE_MID ,
        SFRSTCR_GRDE_DATE   ,
        SFRSTCR_ADD_DATE   ,
        SFRSTCR_ACTIVITY_DATE    ,
        SFRSTCR_LEVL_CODE     ,
        SFRSTCR_CAMP_CODE    ,
        SFRSTCR_USER               ,
        SFRSTCR_DATA_ORIGIN   ,
        sfrstcr_reg_seq      )
        values
        ( temptregs.sfrstcr_term_code, temptregs.sfrstcr_pidm, temptregs.sfrstcr_crn,
        section.ssbsect_ptrm_code , &apos;RE&apos;,temptregs.sfrstcr_rsts_date,  &apos;&apos;, &apos;&apos;, 3,0,3,3,3,&apos;S&apos;,
        temptregs.sfrstcr_grde_code, null, null, temptregs.sfrstcr_add_date, sysdate, &apos;UG&apos;, &apos;M&apos;,
        user,data_origin, id_cnt);


        End Process_Tregs;

        procedure    create_sftregs( pidm number , term_in varchar2 ,
        crn varchar2 , regdate_in date, grade_code varchar2)
        is
        begin
        temptregs := Null ;
        Temptregs.Sfrstcr_Term_Code      :=  term_in;
        Temptregs.Sfrstcr_Pidm           :=    pidm;
        temptregs.sfrstcr_crn            :=  crn ;
        temptregs.sfrstcr_rsts_code      :=  &apos;RE&apos;  ;
        temptregs.sfrstcr_rsts_date      :=  regdate_in;
        temptregs.sfrstcr_add_date      :=  regdate_in;
        temptregs.sfrstcr_bill_hr        := 3;
        temptregs.sfrstcr_waiv_hr        :=  0;
        Temptregs.Sfrstcr_Credit_Hr      :=  4;
        temptregs.sfrstcr_gmod_code      := &apos;S&apos; ;
        temptregs.sfrstcr_add_date       :=   sysdate;
        temptregs.sfrstcr_Activity_Date  :=  Sysdate;
        temptregs.sfrstcr_Levl_Code      :=  &apos;UG&apos; ;
        temptregs.sfrstcr_camp_code      :=   &apos;M&apos; ;
        Temptregs.Sfrstcr_User           :=   User;
        temptregs.sfrstcr_grde_code      := grade_code;
        Process_Tregs(&apos;N&apos;);
        end create_sftregs;

        procedure create_enrollment(pidm number,  term_in varchar2 , regdate_in  date ) is
        p_rowid_out  varchar2(18);
        begin
        SB_ENROLLMENT.P_CREATE(
        p_TERM_CODE              => term_in,
        p_PIDM                   =>  pidm,
        p_ESTS_CODE              => &apos;EL&apos;,
        p_ESTS_DATE              => regdate_in,
        p_MHRS_OVER              => 99,
        p_MIN_HRS            => 0,  -- needed for 8.0
        p_AR_IND                 => &apos;N&apos; ,
        p_ASSESSMENT_DATE        => null,
        p_ADD_DATE               => sysdate,
        p_RGRE_CODE              => null,
        p_TMST_CODE              => null,
        p_TMST_DATE              => null,
        p_TMST_MAINT_IND         =>&apos;S&apos;,
        p_USER                   => USER,
        p_REFUND_DATE            => null,
        p_DATA_ORIGIN            => data_origin,
        p_ROWID_OUT              => p_rowid_out);


        end create_enrollment;


        procedure roll_grades(  term_in varchar2, crn varchar2) is

        begin
        shkrols.p_do_graderoll(term_in ,crn ,USER,
        &apos;1&apos;,&apos;1&apos;,&apos;O&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;);

        end roll_grades;

        begin

        for p in 1..2 loop
        if p = 1 then
        pgm := pgm1;
        else
        pgm := pgm2;
        end if;
        dbms_output.put_line(&apos;Start of pgm &apos; || pgm );

        for i in 1..5000 loop
        id_cnt := id_cnt + 1;
        test_idseqno :=   lpad(to_char(id_cnt), 5, &apos;0&apos;);
        test_id := &apos;PRJ&apos; || test_idseqno;
        dbms_output.put_line(i || &apos; New ID: &apos; || test_id);

        p_rowid_out := null;
        test_pidm := null;

        if i &lt; 1501 then
        major_code := &apos;HIST&apos; ;
        elsif i &lt; 2801 then
        major_code := &apos;ENGL&apos; ;
        elsif i &lt; 4001 then
        major_code := &apos;ART&apos; ;
        else
        major_code := &apos;MATH&apos; ;
        end if;

        begin
        select spriden_pidm into existing_id
        from spriden where spriden_id = test_id;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        existing_id := null;
        END;
        if existing_id is not null then
        delete sfbstrh where sfbstrh_pidm = existing_id;
        delete sfrstrd where sfrstrd_pidm = existing_id;
        delete sorlfos where sorlfos_pidm = existing_id;
        delete sorlfos where sorlfos_pidm = existing_id;
        delete sorlcur where sorlcur_pidm = existing_id;
        delete sv_sgbstdn where sgbstdn_pidm = existing_id;
        delete sfrstcr where sfrstcr_pidm = existing_id;
        delete sfrareg where sfrareg_pidm = existing_id;
        delete sftregs where sftregs_pidm = existing_id;
        delete sfbetrm where sfbetrm_pidm = existing_id;
        delete shrtckg where shrtckg_pidm = existing_id;
        delete shrtckl where shrtckl_pidm = existing_id;
        delete shrtckn where shrtckn_pidm = existing_id;
        delete shrtgpa where shrtgpa_pidm = existing_id;
        delete sv_shrdgmr where shrdgmr_pidm = existing_id;
        delete gobtpac where gobtpac_pidm = existing_id;
        dbms_output.put_line(&apos;remove person &apos; || test_id);
        test_pidm := existing_id;
        end if;

        if existing_id is   null then
        gb_identification.p_create(
        P_ID_INOUT       => test_id,
        P_LAST_NAME      => &apos;Student&apos; || test_idseqno,
        P_FIRST_NAME     => &apos;Projection&apos; || test_idseqno,
        P_MI             => &apos;T&apos;,
        P_CHANGE_IND     => NULL,
        P_ENTITY_IND     => &apos;P&apos;,
        P_USER           => user ,
        P_ORIGIN         => data_origin,
        P_NTYP_CODE      => NULL,
        P_DATA_ORIGIN    => data_origin ,
        P_PIDM_INOUT     => test_pidm,
        P_ROWID_OUT      => p_rowid_out);
        end if;

        Insert Into sv_Sgbstdn (
        SGBSTDN_PIDM               ,
        SGBSTDN_TERM_CODE_EFF         ,
        SGBSTDN_STST_CODE          ,
        Sgbstdn_Styp_Code         ,
        Sgbstdn_Activity_Date,  sgbstdn_resd_code )
        Values (
        test_pidm, stdn_term, &apos;AS&apos;, &apos;S&apos;, sysdate, &apos;R&apos; );

        Insert Into Sv_Sorlcur(
        SORLCUR_PIDM           ,
        SORLCUR_SEQNO          ,
        SORLCUR_LMOD_CODE        ,
        SORLCUR_TERM_CODE         ,
        SORLCUR_KEY_SEQNO     ,
        SORLCUR_PRIORITY_NO     ,
        SORLCUR_ROLL_IND         ,
        SORLCUR_CACT_CODE      ,
        SORLCUR_LEVL_CODE       ,
        SORLCUR_COLL_CODE      ,
        SORLCUR_DEGC_CODE        ,
        sorlcur_program ,
        SORLCUR_USER_ID            ,
        Sorlcur_Data_Origin      ,
        Sorlcur_Activity_Date
        )
        Values (
        test_pidm, 1, Sb_Curriculum_Str.F_Learner, stdn_term,
        99, 1, &apos;Y&apos;, &apos;ACTIVE&apos;, &apos;UG&apos;, &apos;AS&apos;, &apos;BA&apos;, pgm, user, data_origin, sysdate
        );

        insert into sv_sorlfos (
        SORLFOS_PIDM             ,
        SORLFOS_LCUR_SEQNO          ,
        SORLFOS_SEQNO               ,
        SORLFOS_LFST_CODE           ,
        SORLFOS_TERM_CODE         ,
        SORLFOS_PRIORITY_NO         ,
        SORLFOS_CSTS_CODE            ,
        SORLFOS_CACT_CODE            ,
        SORLFOS_MAJR_CODE          ,
        SORLFOS_USER_ID                ,
        SORLFOS_DATA_ORIGIN           ,
        Sorlfos_Activity_Date                )
        Values (
        test_pidm, 1, 1, &apos;MAJOR&apos;, stdn_term,1, &apos;CHANGED&apos;, &apos;ACTIVE&apos;, major_code, user, data_origin, Sysdate  );

        Soklcur.P_Backload_Curr(P_Lmod  => Sb_Curriculum_Str.F_Learner,
        p_term_code => stdn_term,
        P_Keyseqno  =>99 ,
        p_pidm     => test_pidm);

        -- update pin to 11111

        Expirdate := To_Date(&apos;01-JAN-2021&apos;,&apos;DD-MON-YYYY&apos;);
        Gobtpac_Cur := Gb_Third_Party_Access.F_Query_All (P_Pidm => test_Pidm);
        FETCH gobtpac_cur INTO api_gobtpac_rec;
        close gobtpac_cur;
        Gb_Third_Party_Access.P_Update (P_Pidm => test_Pidm,
        P_Pin => &apos;111111&apos;,
        P_Pin_Validate_Ind => &apos;Y&apos;,
        p_usage_accept_ind => &apos;Y&apos;,
        p_rowid => api_gobtpac_rec.r_internal_record_id,
        P_Pin_Exp_Date => Expirdate
        );


        -- register for term 1  seniors
        if i &lt; 1501 then
        regdate := to_date(&apos;23-SEP-2009&apos;,&apos;DD-MON-YYYY&apos;);
        create_enrollment(test_pidm,  term1,regdate);
        create_sftregs(test_pidm, term1, &apos;10003&apos;,regdate, &apos;A&apos;);
        create_sftregs(test_pidm, term1, &apos;10002&apos;,regdate, &apos;B&apos;);
        create_sftregs(test_pidm, term1, &apos;10004&apos;,regdate, &apos;B&apos;);
        create_sftregs(test_pidm, term1, &apos;10001&apos;,regdate, &apos;B&apos;);


        end if;
        -- register for term 2 - juniors and seniors
        if  i &lt;  2801 then
        regdate := to_date(&apos;23-MAR-2010&apos;,&apos;DD-MON-YYYY&apos;);
        create_enrollment(test_pidm,  term2,regdate);
        create_sftregs(test_pidm, term2, &apos;1003&apos;,regdate, &apos;A&apos;);
        create_sftregs(test_pidm, term2, &apos;1002&apos;,regdate, &apos;B&apos;);
        create_sftregs(test_pidm, term2, &apos;1004&apos;,regdate, &apos;B&apos;);
        create_sftregs(test_pidm, term2, &apos;1001&apos;,regdate, &apos;C&apos;);


        end if;
        -- register for term 3  - sophmores, juniors and seniors
        if  i &lt; 4001 then
        regdate := to_date(&apos;23-SEP-2014&apos;,&apos;DD-MON-YYYY&apos;);
        create_enrollment(test_pidm,  term3,regdate);
        create_sftregs(test_pidm, term3, &apos;13152&apos;,regdate, null);
        create_sftregs(test_pidm, term3, &apos;14460&apos;,regdate, null);
        create_sftregs(test_pidm, term3, &apos;14498&apos;,regdate, null);
        create_sftregs(test_pidm, term3, &apos;16452&apos;,regdate, null);
        create_sftregs(test_pidm, term3, &apos;13373&apos;,regdate, null);
        end if;


        end loop; -- for 2500 for  students within pgm
        dbms_output.put_line(&apos;end of loop # &apos; || p);
        end loop; -- loop
        dbms_output.put_line(&apos;roll grades&apos;);
        roll_grades(  term1  , &apos;10003&apos; );
        roll_grades(  term1  , &apos;10002&apos; );
        roll_grades(  term1  , &apos;10004&apos; );
        roll_grades(  term1  , &apos;10001&apos; );

        roll_grades(  term2  , &apos;1001&apos; );
        roll_grades(  term2  , &apos;1003&apos; );
        roll_grades(  term2  , &apos;1002&apos; );
        roll_grades(  term2  , &apos;1004&apos; );

        roll_grades(  term3  , &apos;13373&apos; );
        roll_grades(  term3  , &apos;16452&apos; );
        roll_grades(  term3  , &apos;14498&apos; );
        roll_grades(  term3  , &apos;14460&apos; );
        roll_grades(  term3  , &apos;13152&apos; );

        -- calculate gpas
        open pidm_c;
        loop
        fetch pidm_c into existing_id;
        exit when pidm_c%notfound;
        shkcgpa.P_TERM_GPA(existing_id,
        term1 ,
        &apos;N&apos;);
        shkcgpa.P_TERM_GPA(existing_id,
        term2 ,
        &apos;N&apos;);
        shkcgpa.P_TERM_GPA(existing_id,
        term3 ,
        &apos;N&apos;);
        end loop;
        close pidm_c;

        end;
      </SQL_CODE>
    </PERFORMANCE_SQL>
</PERFORMANCE>