buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
    }
}


group "banner.seeddata.catalog"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-web-testing-support"
	
	//Added for BannerXE commons dbcp specified as physical path
	compile files("lib/commons-dbcp-1.4.jar")
	compile files("lib/commons-pool-1.5.4.jar")
	
	// Added for BannerXE - Oracle jars - specified as physical path
    // TODO - check version of ojdbc.jar
    compile files("lib/ojdbc6-11.2.0.1.0.jar")
    compile files("lib/postgresql-42.2.5.jar")
    runtime files("lib/xdb6-11.2.0.4.jar")	
}

configurations {
    runtime.exclude group: "org.springframework.boot", module: "spring-boot-starter-actuator"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false
assets {
    packagePlugin = true
}

assemble.doLast {
    String basedir = System.getProperty('user.dir')
    basedir =basedir.replace("\\","/")
    int lastIndex=basedir.lastIndexOf("/");
    String pluginRootDir = basedir.substring(0, lastIndex+1);
    String destPath = pluginRootDir +"banner_student_common.git/lib/"

    String srcPath = pluginRootDir+"banner_seeddata_catalog.git/build/libs"

    // make sure that seed-data jar is deleted so that latest jar is copied.
    //before test case execution
    if(new File(destPath).exists()){
        ant.delete(){fileset dir: "${destPath}", includes:"*.jar" }
    }

    if(new File(destPath).exists()){
        ant.copy (todir: destPath){
            println" >>>>>>>>>> copying seed-data jar from  :: "+srcPath +"  :: to :: "+destPath
            fileset( dir:"${srcPath}", includes:"*.jar" )

        }
    }
}


jar.doFirst {
    String basedir = System.getProperty('user.dir')
    basedir =basedir.replace("\\","/")
    int lastIndex=basedir.lastIndexOf("/");
    String pluginRootDir = basedir.substring(0, lastIndex+1);
    println " pluginRootDir >>>>"+pluginRootDir
    String seedDataJarPath = basedir +"/banner_seeddata_catalog-3.0.0.jar"
    println "  >>>>>>>>>>seedDataJarPath ::" +seedDataJarPath
    if(new File(seedDataJarPath).exists()){
        ant.delete(file: seedDataJarPath)
    }
    String seedDataUtilityZipPath = basedir +"/SeedDataUtility.zip"

    println "  >>>>>>>>>>>>seedDataUtilityZipPath ::" +seedDataUtilityZipPath
    if(new File(seedDataUtilityZipPath).exists()){
       ant.delete(file: seedDataUtilityZipPath)
    }

}
jar {
    manifest {
        attributes 'Main-Class': 'net.hedtech.banner.seeddata.SeedDataLoader'
        attributes 'Class-Path': 'lib/grails-core-3.3.2.jar lib/groovy-all-2.4.12.jar ib/ojdbc6-11.2.0.1.0.jar lib/postgresql-42.2.5.jar lib/commons-logging-1.0.4.jar lib/commons-lang-2.6.jar lib/grails-bootstrap-3.3.2.jar lib/xdb6-11.2.0.4.jar'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

sourceSets.main.groovy.srcDirs = ['src/main/groovy']

jar.doLast{
    def zipName ="SeedDataUtility.zip"
    String basedir = System.getProperty('user.dir')
    println "basedir is ::"+basedir;
    basedir =basedir.replace("\\","/")
    int lastIndex=basedir.lastIndexOf("/");
    String pluginRootDir = basedir.substring(0, lastIndex+1);
    println "Plugin Root folder is ::"+pluginRootDir

    String baseFolder = basedir+"/lib/"
    basedir =basedir.replace("\\","/")
    String jarDir = basedir+"/build/libs"

    println " jarDir is ::"+jarDir
    ant.copy (todir: basedir){
        println" >>>>>>>>>> copying seed-data jar from  :: "+jarDir +"  :: to :: "+basedir
        fileset( dir:"${jarDir}", includes:"*.jar" )

    }
    from { "${basedir}/build/classes/main" }

    println "jarDir ::"+jarDir
    ant.zip(destfile: basedir+"/"+zipName, encoding: "UTF-8"){
        zipfileset( dir: "${basedir}" ) {
            include( name:"lib/*.jar" )
            include( name:"*.bat" )
            include( name:"*.sh" )
            include( name:"banner_seeddata_catalog.jar" )

        }
    }

}

jar {
    baseName 'banner_seeddata_catalog'
}
